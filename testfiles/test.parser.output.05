(define test-tree (5 (3 () (4 () ())) (6 () ()))) (define null-binary-tree (lambda () ())) (check-equal? (null-binary-tree) ()) (define entry (lambda (node) (car node))) (check-equal? (entry test-tree) 5) (define left (lambda (node) (car (cdr node)))) (check-equal? (left test-tree) (3 () (4 () ()))) (define binary-tree? (lambda (node) (cond ((not (list? node)) #f) ((= (length node) 0) #t) ((= (length node) 3) (and (binary-tree? (left node)) (binary-tree? (right node)) (integer? (entry node)))) (else #f)))) (check-equal? (binary-tree? test-tree) #t) (check-equal? (binary-tree? (quote (2 5 6))) #f)
