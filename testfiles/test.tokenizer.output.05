(:open
define:symbol
test-tree:symbol
(:open
5:integer
(:open
3:integer
(:open
):close
(:open
4:integer
(:open
):close
(:open
):close
):close
):close
(:open
6:integer
(:open
):close
(:open
):close
):close
):close
):close
(:open
define:symbol
null-binary-tree:symbol
(:open
lambda:symbol
(:open
):close
(:open
):close
):close
):close
(:open
check-equal?:symbol
(:open
null-binary-tree:symbol
):close
(:open
):close
):close
(:open
define:symbol
entry:symbol
(:open
lambda:symbol
(:open
node:symbol
):close
(:open
car:symbol
node:symbol
):close
):close
):close
(:open
check-equal?:symbol
(:open
entry:symbol
test-tree:symbol
):close
5:integer
):close
(:open
define:symbol
left:symbol
(:open
lambda:symbol
(:open
node:symbol
):close
(:open
car:symbol
(:open
cdr:symbol
node:symbol
):close
):close
):close
):close
(:open
check-equal?:symbol
(:open
left:symbol
test-tree:symbol
):close
(:open
3:integer
(:open
):close
(:open
4:integer
(:open
):close
(:open
):close
):close
):close
):close
(:open
define:symbol
binary-tree?:symbol
(:open
lambda:symbol
(:open
node:symbol
):close
(:open
cond:symbol
(:open
(:open
not:symbol
(:open
list?:symbol
node:symbol
):close
):close
#f:boolean
):close
(:open
(:open
=:symbol
(:open
length:symbol
node:symbol
):close
0:integer
):close
#t:boolean
):close
(:open
(:open
=:symbol
(:open
length:symbol
node:symbol
):close
3:integer
):close
(:open
and:symbol
(:open
binary-tree?:symbol
(:open
left:symbol
node:symbol
):close
):close
(:open
binary-tree?:symbol
(:open
right:symbol
node:symbol
):close
):close
(:open
integer?:symbol
(:open
entry:symbol
node:symbol
):close
):close
):close
):close
(:open
else:symbol
#f:boolean
):close
):close
):close
):close
(:open
check-equal?:symbol
(:open
binary-tree?:symbol
test-tree:symbol
):close
#t:boolean
):close
(:open
check-equal?:symbol
(:open
binary-tree?:symbol
(:open
quote:symbol
(:open
2:integer
5:integer
6:integer
):close
):close
):close
#f:boolean
):close
